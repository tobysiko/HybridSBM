/**
 \page new_features_11 New in PROFASI version 1.1

\li A new PDB handling module with a composite capable selection and filter rules that greatly improve how PROFASI deals with PDB files and RMSD calculations. There are no "BackboneRMSD" or "HeavyAtomRMSD" classes any more. The user can create virtually any kind of RMSD Observable on the fly. A demonstration of what can be done is given in the application program \ref mimiqa . The selections and filters are explained in \ref prf_sel_fils . \n\n
\li A translater program, \ref conf_to_gzip, that uses zlib to convert profasi binary conf files to gzip files. Using this program the user can transfer binary configuration data generated by PROFASI on one computer platform to another, without generating a bulky text intermediates.  \n\n
\li Log levels: The verbosity of messages in the log files can be controlled without recompilation, by simply setting prf::Logger::verbosity = some_value. Higher the value, more verbose is the log.  \n\n
\li New Observable classes, \ref NativenessQ, \ref ContactOrder, \ref RCAngleRMSD, \ref RCBin  \n\n
\li New application programs, (i) \ref extract_props to generate the run time history file form a stored configuration file or generate snapshots required for an animation (ii) \ref pdb_energies to calculate energies of a pdb structure, (iii) \ref contact_order to calculate contact order of a given PDB file. (iv) \ref mimiqa a rather flexible command line RMSD calculator. \n\n
\li New SeqBuilder class to read a sequence with PROFASI sequence reading syntax, as explained in \ref seq_input . The sequence can be entered as a series of one letter codes, three letter codes or even full names of the residues.  One can toggle to and from the one letter code mode with a '*', like < *KLV*DPR*NNAK* >. Use names or 3 letter codes for EndGroups or synthetic amino acids, and toggle to one letter codes for the 20 natural amino acids.  \n\n
\li Smaller binary configuration files due to a change in the way random number configurations are stored. Even if the exact state of a MersenneTwister generator consists of about 630 long integer variables, one long variable, the seed, and one unsigned long variable, the number of calls to the generator, suffice to restore the generator to a given state. This shrinks the configuration files by a factor of 4 for 20 residue peptides. Even for larger proteins, the space saving could be hundreds of Megabytes, and is well worth it. 

\li Automatically generated GroupLib class with information regarding all amino acids and EndGroup classes. Adding new groups or modified amino acids to PROFASI should now be easier as most of the book keeping related to atom order, PDB file labels etc are done in the GroupLib class. And this class is generated automatically by running a python script called build_grouplib.py provided with PROFASI. The script parses a set up file, residue_info.txt in the model directory, containing information about all residues in a compact but intuitive manner, and generates a GroupLib class that handles the book keeping for every group. The user still has to implement an AminoAcid or EndGroup class, but that class now contains little more than the specification of the geometry of the new group.  \n\n
\li Energy classes do not any more ask for the names of the updates to optimize deltaE functions. They ask about some properties of the updates, like "is it a side chain update/ backbone update or an update involving one or more chains ? How many subsets of moving amino acids are there, such that any two residues in one group move entirely rigidly relative to each other ? These questions are always legitimate for an update. When any new update class answers these questions, the energy classes will end up being automatically optimized for the new update. \n\n
\li A leaner, thinner ObsHandler class that does not own any Observables, but does the administration. This makes the class a little less cumbersome. The class can nevertheless recognize any number of commands and set up and set up Observables as required by the user. Energy values and over all secondary structure content remain as default observables, but even they are owned by InterfaceBase where they belong, rather than by ObsHandler.  \n\n
\li No multi-line observable setup in the settings file. Each observable is now able to set itself up from a command string. So, to set up an RMSD observable, you don't write 3 commands stating what file to compare with, what the range in the PDB file and in the program are. You do it with one line with a (hopefully) much clearer syntax.  \n\n
\li Top level programs for simulations now print help text, and accept command line options. Options provided on the command line have priority over those given in the settings file. \n\n
\li Simulation programs for simulated tempering and parallel tempering now derive from a BasicMCRun class, which implements canonical Monte Carlo runs. When something relating to the way Monte Carlo runs are conducted is to be changed, one does not have to repeat the changes in all files now. Just BasicMCRun.cc. The derived classes, implementing only the extension needed to do simulated tempering or parallel tempering for instance,  automatically acquire those changes.  \n\n
\li And many many bug fixes. \n\n

*/
