/*******************************************************************************
    PROFASI: Protein Folding and Aggregation Simulator, Version 1.5
    Copyright (C) (2012)  Anders Irback and Sandipan Mohanty
    Email: profasi@thep.lu.se
    Home Page: http://cbbp.thep.lu.se/activities/profasi/
    Version control (git) : https://trac.version.fz-juelich.de/PROFASI

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License
    (see PROFASI/gpl.txt).

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
********************************************************************************/

#ifndef TRAJSEG_HH
#define TRAJSEG_HH
#include "TrajSnapshot.hh"
#include "prf_raw_conf.hh"

namespace prf_traj
{
    //! A segment of a trajectory
    /**
      A TrajSeg is a segment of a PROFASI "trajectory" represented by the
      prf_traj::Trajectory class. A segment is generated by saving a series
      of snapshots (prf_traj::TrajSnapshot) until the run is finished or
      suspended because of run-time restrictions. When a run is continued
      after being suspended, a new segment is created.

      A segment is a series of snapshots. But the segment contains additional
      data to help interpret the snapshots, such as the sequence of chains
      in the population, box size etc. The data in the snapshots taken together
      with this information should suffice to reconstruct all properties of
      the simulated system.

      A PROFASI trajectory segment file also contains information about the
      machine where the simulation ran. It is therefore possible to interpret
      segment files generated on one machine in another.

      The prf_traj::Trajectory class interacts with segments with only a
      generic interface which does involve details of data layout in the file.
      Retrieving data from the file and interpreting it is handled by an object
      of type prf_traj::prf_raw_conf . In the future prf_raw_conf will be
      sub-classed to enable using alternative binary storage formats like HDF5.
      \sa prf_traj::TrajSnapshot, prf_traj::Trajectory, prf_traj::prf_raw_conf
      \ingroup prf_trajectory
      */
    class TrajSeg
    {
    public:
        TrajSeg();
        TrajSeg(const TrajSeg &);
        ~TrajSeg();
        int init();
        void set_file(std::string st);
        std::string get_filename();
        std::string determine_conf_type(std::string st);
        //! MC cycle of the first snapshot
        inline unsigned long min_cycle() const { return mncyc; }
        //! MC cycle of the last snapshot
        inline unsigned long max_cycle() const { return mxcyc; }
        //! Interval in MC cycles between adjacent snapshots
        inline unsigned long interval() const { return intv; }
        //! Integer index assigned to the first block or snapshot
        /**
          A segment expects to be one of a series of segments. Therefore,
          the first block of data in a segment might be the 153rd block
          in a long simultion. This returns the block id of the first
          block. Of course, the segment can not know it on its own. This
          has to be set with the set_block_id_offset() function.
          */
        inline unsigned long first_block() const { return blkidoff; }
        //! Integer idex corresponding to the last block
        inline unsigned long last_block() const { return blkidoff+nblk-1; }
        //! Set offset for the integer indexes of the data blocks
        inline void set_block_id_offset(unsigned l) { blkidoff=l; }
        //! Number of blocks or snapshots
        inline unsigned long n_blocks() const { return nblk; }

        //! Select only a set of blocks in a certain range in MC time
        /**
          This function discards snapshots in the beginning and end of the
          segment, so that TrajSeg pretends they don't exist for subsequent
          querries. It does not delete data in the files. Only ignores them.
          */
        void truncate_in_t_range(unsigned long t0, unsigned long t1);
        //! Select a set of blocks identified by their block ids
        void truncate_in_block_range(unsigned t0, unsigned t1);
        //! Retrieve a certain block or snapshot
        bool get_block(unsigned iblk, TrajSnapshot &snp);
        //! Search for a block of a certain MC time and retrieve it
        /**
          If the requested MC cycle is outside the currently active MC time
          range for the segment, the return value is false. If it is within
          the range but does not correspond to the MC time of any snapshot,
          the snapshot with the nearest MC time before the requested time
          is returned.
          */
        bool get_block_at_mct(unsigned long mct, TrajSnapshot &snp);
        bool calc_block_id(unsigned long mct, unsigned &blkid);
        //! Put segment to sleep
        /**
          Sleep means closing the file handle while keeping all meta data.
          When wake_up is called after sleep, no initialisation is needed.
          */
        bool sleep();
        //! (Re-)open file handle to read snapshot data again
        /**
          If initialisation was done before, wake_up simply opens the file
          handle to the data file and returns. If initialisation has never
          happened, init() is called.
          */
        bool wake_up();
        //! An XML map containing information which applies to all snapshots
        inline prf_xml::XML_Node *xml_map() {return mymap;}

        void set_block_props(unsigned long cyc0, unsigned long intvl,
                             unsigned blks);
    private:
        unsigned long mncyc, intv, mxcyc, fmncyc, fmxcyc;
        unsigned blkidoff,nblkfile,nblk,frstusedblk;
        bool get_file_block(unsigned iblk, TrajSnapshot &snp);
        prf_raw_conf *data;
        prf_xml::XML_Node *mymap;
        bool awake;
    };
}

#endif // TRAJSEG_HH
